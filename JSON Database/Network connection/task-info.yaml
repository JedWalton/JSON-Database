type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTest(order = 1)
        CheckResult test() {

            TestedProgram server = new TestedProgram("server");
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram("client");

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/exception/CommandNotFoundException.java
  visible: true
  text: |
    package server.exception;

    public class CommandNotFoundException extends RuntimeException {

    }
  learner_created: true
- name: src/server/DatabaseController.java
  visible: true
  text: |
    package server;

    import server.utils.Commands;
    import server.utils.UserInput;

    import java.util.Arrays;

    public class DatabaseController {

        public static String[] database;


        public DatabaseController() {
            database = new String[100];
            Arrays.fill(database, "");
        }


        public void processUserInput() {
            while (true) {
                String[] userInputLine = UserInput.getUserInputLine();
                String command = UserInput.getCommand(userInputLine);
                int id = UserInput.getId(userInputLine);
                String text = UserInput.getText(userInputLine);


                if (id > 99 || id < 0) {
                    System.out.println("ERROR");
                    continue;
                }

                if(command.equals("set")) {
                    Commands.setCommand(id, text);
                } else if (command.equals("get")) {
                    Commands.getCommand(id);
                } else if (command.equals("delete")) {
                    Commands.deleteCommand(id);
                } else if(command.equals("exit")) {
                    Commands.exit();
                }
            }
        }
    }
  learner_created: true
- name: src/server/utils/Commands.java
  visible: true
  text: |
    package server.utils;

    import server.DatabaseController;

    import java.util.Objects;

    public class Commands extends DatabaseController {

        private Commands() {

        }

        public static void setCommand(int id, String text) {
            database[id] = text;
            System.out.println("OK");
        }

        public static void getCommand(int id) {
            String text = database[id];

            if (Objects.equals(text, "")) {
                System.out.println("ERROR");
            } else {
                System.out.println(text);
            }
        }

        public static void deleteCommand(int id) {
            database[id] = "";
            System.out.println("OK");
        }

        public static void exit() {
            System.exit(1);
        }
    }
  learner_created: true
- name: src/server/utils/UserInput.java
  visible: true
  text: |
    package server.utils;

    import server.exception.CommandNotFoundException;

    import java.util.Scanner;

    public class UserInput {
        private UserInput() {
        }

        public static String getCommand(String[] userInputLine) {
            String commandString = userInputLine[0];

            switch (commandString) {
                case "get":
                    return "get";
                case "set":
                    return "set";
                case "delete":
                    return "delete";
                case "exit":
                    return "exit";
            }

            throw new CommandNotFoundException();
        }

        public static int getId(String[] userInputLine) {
            if (userInputLine.length>1) {
                return Integer.parseInt(userInputLine[1]) - 1;
            }
            return 0;
        }

        public static String getText(String[] userInputLine) {
            String text = "";
            if (userInputLine.length > 2) {
                for (int i = 2; i < userInputLine.length; i++) {
                    text = text.concat(userInputLine[i]);
                    if (i < userInputLine.length - 1) {
                        text = text.concat(" ");
                    }
                }
            }
            return text;
        }

        public static String[] getUserInputLine() {
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine().split(" ");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5491#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 22 Jun 2022 03:38:54 UTC
record: 2
