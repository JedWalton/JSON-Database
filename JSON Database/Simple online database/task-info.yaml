type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/exception/CommandNotFoundException.java
  visible: true
  text: |
    package server.exception;

    public class CommandNotFoundException extends RuntimeException {

    }
  learner_created: true
- name: src/server/DatabaseController.java
  visible: true
  text: |
    package server;

    import server.utils.Commands;
    import server.utils.UserInput;

    import java.util.Arrays;

    public class DatabaseController {

        public static String[] database;


        public DatabaseController() {
            database = new String[100];
            Arrays.fill(database, "");
        }


        public void processUserInput() {
            while (true) {
                String[] userInputLine = UserInput.getUserInputLine();
                String command = UserInput.getCommand(userInputLine);
                int id = UserInput.getId(userInputLine);
                String text = UserInput.getText(userInputLine);


                if (id > 99 || id < 0) {
                    System.out.println("ERROR");
                    continue;
                }

                if(command.equals("set")) {
                    Commands.setCommand(id, text);
                } else if (command.equals("get")) {
                    Commands.getCommand(id);
                } else if (command.equals("delete")) {
                    Commands.deleteCommand(id);
                } else if(command.equals("exit")) {
                    Commands.exit();
                }
            }
        }
    }
  learner_created: true
- name: src/server/utils/Commands.java
  visible: true
  text: |
    package server.utils;

    import server.DatabaseController;

    import java.util.Objects;

    public class Commands extends DatabaseController {

        private Commands() {

        }

        public static void setCommand(int id, String text) {
            database[id] = text;
            System.out.println("OK");
        }

        public static void getCommand(int id) {
            String text = database[id];

            if (Objects.equals(text, "")) {
                System.out.println("ERROR");
            } else {
                System.out.println(text);
            }
        }

        public static void deleteCommand(int id) {
            database[id] = "";
            System.out.println("OK");
        }

        public static void exit() {
            System.exit(1);
        }
    }
  learner_created: true
- name: src/server/utils/UserInput.java
  visible: true
  text: |
    package server.utils;

    import server.exception.CommandNotFoundException;

    import java.util.Scanner;

    public class UserInput {
        private UserInput() {
        }

        public static String getCommand(String[] userInputLine) {
            String commandString = userInputLine[0];

            switch (commandString) {
                case "get":
                    return "get";
                case "set":
                    return "set";
                case "delete":
                    return "delete";
                case "exit":
                    return "exit";
            }

            throw new CommandNotFoundException();
        }

        public static int getId(String[] userInputLine) {
            if (userInputLine.length>1) {
                return Integer.parseInt(userInputLine[1]) - 1;
            }
            return 0;
        }

        public static String getText(String[] userInputLine) {
            String text = "";
            if (userInputLine.length > 2) {
                for (int i = 2; i < userInputLine.length; i++) {
                    text = text.concat(userInputLine[i]);
                    if (i < userInputLine.length - 1) {
                        text = text.concat(" ");
                    }
                }
            }
            return text;
        }

        public static String[] getUserInputLine() {
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine().split(" ");
        }
    }
  learner_created: true
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: test/server/utils/UserInputTest.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    The server should stop when client sends &#39;exit&#39; request

    Please find below the output of your program during this failed test.

    ---

    Arguments for Main: -t exit

    Server started!
    Client started!
    Client started!
    Sent: Give me a record of # NReceived: Give me a record of # N
    Sent: A record # N was sent!Received: A record # N was sent!
  time: Thu, 23 Jun 2022 01:45:15 UTC
record: 3
